{"author":{"id":"4a66333145a8be3a1fab83bfb67acb16b49eec9bba93a1d3ada9ca43625279f7"},"ops":[{"type":3,"author":{"id":"4a66333145a8be3a1fab83bfb67acb16b49eec9bba93a1d3ada9ca43625279f7"},"timestamp":1617539342,"nonce":"h7XfVymyfdtYV+UgghQiilsDtTU=","message":"Ez egy elég nagy téma, talán két részre lehetne bontani: 1) a diff cache-elése 2) statikus html az olyan oldalra ami ritkán változik.\n\nA cache azért fontos, mert pl a footer tartalmazza a git hash-t ami arányag gyakran változik, tipikusan naponta. 0-ról újraszámolni az összes missing-housenumbers oldalt sok relációra csak azért, mert változott a git hash az elég nagy pocsékolás. Más static site generátorok is tipikusan cache-elnek, pl a pelican is cache-eli az asciidoc outputot, így tudja kb 1 sec alatt legenerálni egy 1000 oldalból álló oldal tartalmát. Ezt eddig azért nem valósítottam meg, mert minden teljesítménybeli fejlesztés növeli a szoftver bonyolultságát, és én házszámozni szeretnék az osm kontextusában, nem programozni. Minél unalmasabb, régimódibb és egyszerűbb a technológia, annál jobb. :) De most a 11. kerület legenerálása nálam helyben is 26 sec körül van, ami egyértelműen lassú, így látom értelmét valamiféle cache-elésnek. Elvileg ezek a függőségek vannak: 1) osm utcák 2) osm házszámok 3) ref házszámok 4) filterek. Ha a HTML kimenet lényegi részét elmentjük és nézzük, hogy a cache ennél a 4-nél újabb legyen, akkor ez megoldható.\n\nA static html ezek után engem max akkor izgat ha a cache önmagában nem viszi el mondjuk a költség 80%át. Egyéb esetben inkább adnék json apit, és utána külső projekt építhet belőle html/js webappot ha akar, ezzel én nem nagyon tervezek foglalkozni.\n\nDe a cache-t sem most, inkább megyek házszámozni. :)","files":null}]}