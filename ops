{"version":2,"ops":[{"type":1,"author":{"id":"9220cb50cc752fe99781ba3a9dfcc011de3ac407"},"timestamp":1615724762,"metadata":{"github-id":"MDU6SXNzdWU4MzExNDM4MTA=","github-url":"https://github.com/vmiklos/osm-gimmisn/issues/1112","origin":"github"},"title":"Oldalbetöltési optimalizáció - devops","message":"- [ ] A HTTP 404 nincs kezelve - mindig a főoldal jön be rá.\n- [ ] A favicon.ico hiányzik. Talán emiatt jelentősen lassabb a betöltés, mert a háttérben kétszer tölti be az oldalt.\n- [ ] A szerver nem használ tömörítést a visszaadott lapokra és erőforrásokra (.htaccess?).\n- [ ] Érdemesebb volna a JavaScript és CSS behúzást az oldal legvégére, a \u003c/body\u003e elé rakni, mert így a \u003chead\u003e-ben blokkolja az első megjelenítést. Nem ellenőriztem, hogy bírja-e ezt a függvénykönyvtárad.\n- [ ] Valamiért az osm.css nem mindig cache-elődik Chromiumon, míg a bundle.js igen. Utána egy idő után elkezdi, aztán mégse, de nem túl determinisztikus (talán az utolsó frissítés dátuma működik véletlenszerűen). A válasz fejlécébe érdemes volna felvenni néhány dolgot, nem tudom, hogy a frameworkod csinálja vagy a `.htaccess` (`Expires`, `max-age` `Cache-Control`) https://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-13#section-2.1 https://robinroelofsen.com/browser-caching-htaccess-apache\n- [ ] A következőhöz már kódolni is kell, bár nem vészesen sokat. Jelentősen csökkentené a késleltetést (300-500ms+) ha minden oldalbetöltés statikus HTML-re mutatna. Ezen belül két megoldás adódik. Vagy az adatokat JavaScripttel töltené ki, vagy optimálisabban előre ki volna töltve adatokkal, így nem is kéne lekérni. Utóbbihoz nem csak a txt-ket generálná a cron és a frissítés gomb meghívása, hanem statikus html-ként az eredményeket is. Ehhez ipari oldalakon illendő versenyhelyzet ütközések okán ehhez ideális verziózott fájlnevekre átállni, bár itt még lehet, hogy elmegy simán a felülírogatás.\n- [ ] A következőhöz gyakorlatilag az egész frontendet ki kell cserélni, így nem várom el, csak érdekességként megírom, hogy lehetne progresszív egyoldalas webalkalmazás is az egész, amikor egyetlen statikus HTML-ben navigál a felhasználó és esetleg a backendről az adatokat kéregeti le vagy frissítgeti, így még a kattintásonkénti \u003c100ms statikus oldalbetöltést is meg lehetne spórolni.","files":null}]}