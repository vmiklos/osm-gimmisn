{"author":{"id":"4a66333145a8be3a1fab83bfb67acb16b49eec9bba93a1d3ada9ca43625279f7"},"ops":[{"type":3,"author":{"id":"4a66333145a8be3a1fab83bfb67acb16b49eec9bba93a1d3ada9ca43625279f7"},"timestamp":1615728481,"nonce":"0Jcad7IAYRZRt4AJfeVUaufYa0Q=","message":"Elég sok minden van itt, szét kéne bontani az összes pipát külön issue-ra, nekem legalábbis anélkül nincs nagyon motivációm ezzel foglalkozni. :) Szétbontsam, vagy megcsinálod?\n\nEz azért is fontos, mert egy issue-ra csak egy confirmed vagy needs-testing labelt lehet rakni, így ha egy issue-ban két dolgot kérsz, nem egyértelmű, hogy mlyeik confirmed, tesztelendő.\n\nDe röviden:\n\n\u003e     * [ ]  A HTTP 404 nincs kezelve - mindig a főoldal jön be rá.\n\nJogos, megoldható.\n\n\u003e     * [ ]  A favicon.ico hiányzik. Talán emiatt jelentősen lassabb a betöltés, mert a háttérben kétszer tölti be az oldalt.\n\nJogos.\n\n\u003e     * [ ]  A szerver nem használ tömörítést a visszaadott lapokra és erőforrásokra (.htaccess?).\n\nEzt kicsit konkretizálni kéne, hogy pontosan milyen headerre kéne reagálnia a kódnak.\n\n\u003e     * [ ]  Érdemesebb volna a JavaScript és CSS behúzást az oldal legvégére, a  elé rakni, mert így a -ben blokkolja az első megjelenítést. Nem ellenőriztem, hogy bírja-e ezt a függvénykönyvtárad.\n\nErre van valamilyen html megoldás is, nem? html elementre attribútum rémlik, amivel lehet opt-inelni, hogy async legyen a betöltés.\n\n\u003e     * [ ]  Valamiért az osm.css nem mindig cache-elődik Chromiumon, míg a bundle.js igen. Utána egy idő után elkezdi, aztán mégse, de nem túl determinisztikus (talán az utolsó frissítés dátuma működik véletlenszerűen). A válasz fejlécébe érdemes volna felvenni néhány dolgot, nem tudom, hogy a frameworkod csinálja vagy a `.htaccess` (`Expires`, `max-age` `Cache-Control`) https://tools.ietf.org/html/draft-ietf-httpbis-p6-cache-13#section-2.1 https://robinroelofsen.com/browser-caching-htaccess-apache\n\nItt is utána kéne járni, hogy pontosan milyen headert kérsz amitől jobb lesz. \nLast-Modified van rajta, ez legutóbb lég volt, de lehet csak firefox alól néztem.\n\n\u003e     * [ ]  A következőhöz már kódolni is kell, bár nem vészesen sokat. Jelentősen csökkentené a késleltetést (300-500ms+) ha minden oldalbetöltés statikus HTML-re mutatna. Ezen belül két megoldás adódik. Vagy az adatokat JavaScripttel töltené ki, vagy optimálisabban előre ki volna töltve adatokkal, így nem is kéne lekérni. Utóbbihoz nem csak a txt-ket generálná a cron és a frissítés gomb meghívása, hanem statikus html-ként az eredményeket is. Ehhez ipari oldalakon illendő versenyhelyzet ütközések okán ehhez ideális verziózott fájlnevekre átállni, bár itt még lehet, hogy elmegy simán a felülírogatás.\n\nLehet elég lenne csak annyi, hogy a diff kimenete cache-elve legyen, abból htmlt generálni elég olcsó.\n\n\u003e     * [ ]  A következőhöz gyakorlatilag az egész frontendet ki kell cserélni, így nem várom el, csak érdekességként megírom, hogy lehetne progresszív egyoldalas webalkalmazás is az egész, amikor egyetlen statikus HTML-ben navigál a felhasználó és esetleg a backendről az adatokat kéregeti le vagy frissítgeti, így még a kattintásonkénti \u003c100ms statikus oldalbetöltést is meg lehetne spórolni.\n\nEz ott bukik el, hogy jelenleg az oldal tökéletesen működik JS nélkül is, tehát bármilyen JS használat csak akkor megengedett, ha opcionális. Ha megnézed, az összes js handler js-ből regisztrálódik be, anélkül is mennek a linkek, sima http gettel.","files":null},{"type":5,"author":{"id":"4a66333145a8be3a1fab83bfb67acb16b49eec9bba93a1d3ada9ca43625279f7"},"timestamp":1615728670,"nonce":"FgIWTIWA0rzwHQD2oDEN9y8XMu8=","added":["question"],"removed":null}]}